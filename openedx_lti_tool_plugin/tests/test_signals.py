"""Test signals module."""
from unittest.mock import MagicMock, patch

from django.contrib.auth import get_user_model
from django.db.models import signals
from django.test import TestCase
from pylti1p3.contrib.django.lti1p3_tool_config.models import LtiTool, LtiToolKey

from openedx_lti_tool_plugin.apps import OpenEdxLtiToolPluginConfig as app_config
from openedx_lti_tool_plugin.models import LtiProfile, LtiToolConfiguration
from openedx_lti_tool_plugin.signals import create_lti_tool_configuration, restrict_lti_profile_user
from openedx_lti_tool_plugin.tests import AUD, ISS, SUB

EMAIL = 'test@example.com'
NEW_EMAIL = 'new@example.com'
APP_EMAIL = f'test@{app_config.domain_name}'
USERNAME = 'test-username'


class TestRestrictLtiProfileUser(TestCase):
    """Test restrict_lti_profile_user signal."""

    def setUp(self):
        """Set up test fixtures."""
        signals.pre_save.disconnect(
            sender=get_user_model(),
            dispatch_uid=f'{app_config.name}.restrict_lti_profile_user',
        )
        self.user_model = get_user_model()
        self.user = self.user_model.objects.create(
            email=EMAIL,
            username=USERNAME,
        )
        self.lti_profile = LtiProfile.objects.create(
            platform_id=ISS,
            client_id=AUD,
            subject_id=SUB,
        )

    @patch.object(LtiProfile.objects, 'get')
    def test_user_created(self, get_mock: MagicMock):
        """Test when User is being created."""
        self.user.pk = None

        restrict_lti_profile_user(self.user_model, self.user)

        get_mock.assert_not_called()
        self.assertEqual(self.user.email, EMAIL)

    @patch.object(LtiProfile.objects, 'get')
    def test_user_without_lti_profile(self, get_mock: MagicMock):
        """Test when User has no LtiProfile instance."""
        get_mock.side_effect = LtiProfile.DoesNotExist
        self.user.email = NEW_EMAIL

        restrict_lti_profile_user(self.user_model, self.user)

        get_mock.assert_called_once_with(user=self.user)
        self.assertEqual(self.user.email, NEW_EMAIL)

    @patch.object(LtiProfile.objects, 'get')
    def test_user_with_multiple_lti_profiles(self, get_mock: MagicMock):
        """Test when User has multiple LtiProfile instances."""
        get_mock.side_effect = LtiProfile.MultipleObjectsReturned
        self.user.email = NEW_EMAIL

        restrict_lti_profile_user(self.user_model, self.user)

        get_mock.assert_called_once_with(user=self.user)
        self.assertEqual(self.user.email, NEW_EMAIL)

    @patch.object(LtiProfile.objects, 'get')
    def test_non_autogenerated_user_email(self, get_mock: MagicMock):
        """Test when User email is non-autogenerated."""
        self.lti_profile.user = self.user
        get_mock.return_value = self.lti_profile
        self.user.email = NEW_EMAIL

        restrict_lti_profile_user(self.user_model, self.user)

        get_mock.assert_called_once_with(user=self.user)
        self.assertEqual(self.user.email, NEW_EMAIL)

    @patch.object(LtiProfile.objects, 'get')
    def test_autogenerated_user_email(self, get_mock: MagicMock):
        """Test when User email is autogenerated."""
        get_mock.return_value = self.lti_profile
        user = self.user_model.objects.get(pk=self.lti_profile .user.pk)
        user.email = NEW_EMAIL

        restrict_lti_profile_user(self.user_model, user)

        get_mock.assert_called_once_with(user=user)
        self.assertEqual(user.email, self.lti_profile.user.email)


class TestCreateLtiToolConfiguration(TestCase):
    """Test create_lti_tool_configuration signal."""

    def setUp(self):
        """Test fixtures setup."""
        signals.post_save.disconnect(sender=LtiTool, dispatch_uid='create_access_configuration_on_lti_tool_creation')
        self.lti_tool = LtiTool.objects.create(
            client_id='x',
            issuer='x',
            auth_login_url='random-login-url',
            auth_token_url='random-token-url',
            deployment_ids='["random-deployment-id"]',
            tool_key=LtiToolKey.objects.create(),
        )

    @patch.object(LtiToolConfiguration.objects, 'get_or_create')
    def test_lti_tool_created(self, get_or_create_mock: MagicMock):
        """Test signal when LtiTool instance is created.

        Args:
            get_or_create_mock: Mocked LtiToolConfiguration get_or_create method.
        """
        create_lti_tool_configuration(LtiTool, self.lti_tool, created=True)

        get_or_create_mock.assert_called_once_with(lti_tool=self.lti_tool)

    @patch.object(LtiToolConfiguration.objects, 'get_or_create')
    def test_lti_tool_updated(self, get_or_create_mock: MagicMock):
        """Test signal when LtiTool instance is updated.

        Args:
            get_or_create_mock: Mocked LtiToolConfiguration get_or_create method.
        """
        create_lti_tool_configuration(LtiTool, self.lti_tool, created=False)

        get_or_create_mock.assert_not_called()
