"""Django Signals."""
from django.contrib.auth import get_user_model
from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from pylti1p3.contrib.django.lti1p3_tool_config.models import LtiTool

from openedx_lti_tool_plugin.apps import OpenEdxLtiToolPluginConfig as app_config
from openedx_lti_tool_plugin.models import LtiProfile, LtiToolConfiguration, UserT


@receiver(
    pre_save,
    sender=get_user_model(),
    dispatch_uid=f'{app_config.name}.restrict_lti_profile_user',
)
def restrict_lti_profile_user(
    sender: UserT,  # pylint: disable=unused-argument
    instance: UserT,
    **kwargs: dict,
):
    """Restrict LtiProfile User.

    This signal restrict changes to an LtiProfile User.

    If the User has an LtiProfile instance and has an autogenerated
    email, this signal will prevent the User email from being changed,
    this is done to prevent an User with an autogenerated email to
    gain access to the Open edX platform outside an LTI 1.3 launch.

    Args:
        sender: User model.
        instance: User model instance.
        **kwargs: Arbitrary keyword arguments.

    """
    # Ignore if User is being created.
    if not instance.pk:
        return

    # Ignore if User has no LtiProfile instance or User is
    # non-autogenerated and has multiple LtiProfile instances.
    # There could be an edge case in which an autogenerated User
    # has multiple LtiProfile, this could only happen if an
    # LtiProfile has been manually created.
    try:
        lti_profile = LtiProfile.objects.get(user=instance)
    except (LtiProfile.DoesNotExist, LtiProfile.MultipleObjectsReturned):
        return

    # Ignore non-autogenerated User.
    if f'@{app_config.domain_name}' not in lti_profile.user.email:
        return

    # Restrict modifying autogenerated User email.
    if instance.email != lti_profile.email:
        instance.email = lti_profile.email

    return


@receiver(
    post_save,
    sender=LtiTool,
    dispatch_uid=f'{app_config.name}.create_lti_tool_configuration',
)
def create_lti_tool_configuration(
    sender: LtiTool,  # pylint: disable=unused-argument
    instance: LtiTool,
    created: bool,
    **kwargs: dict,
):
    """Create LtiToolConfiguration instance for LtiTool.

    Args:
        sender: The model class being saved.
        instance: The model instance being saved.
        created: A boolean representing if the instance was created.
        **kwargs: Arbitrary keyword arguments.
    """
    # Only create a LtiToolConfiguration instance if LtiTool was created.
    if created:
        LtiToolConfiguration.objects.get_or_create(lti_tool=instance)
